{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Wrapper.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","email","react_default","a","createElement","className","src","concat","alt","CardList","contacts","CardArray","map","user","x","components_Card","key","SearchBar","searchfield","searchChange","type","placeholder","onChange","Wrapper","props","style","overflow","border","height","backgroundColor","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredContacts","filter","toLowerCase","includes","length","components_SearchBar","components_Wrapper","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAgBeA,EAdF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAKC,EAAcF,EAAdE,GAAGC,EAAWH,EAAXG,MACrB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kDAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,wBAAwBC,IAAG,4BAAAC,OAA+BP,EAA/B,YAA6CQ,IAAI,YAC7FN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAW,aAAf,IAA6BN,GAC7BG,EAAAC,EAAAC,cAAA,KAAGC,UAAY,oBAAf,IAAoCJ,EAApC,QCgBYQ,EArBE,SAAAX,GAAgB,IAAdY,EAAcZ,EAAdY,SACZC,EAAYD,EAASE,IAAI,SAACC,EAAMC,GACrC,OACEZ,EAAAC,EAAAC,cAACW,EAAD,CACCC,IAAON,EAASI,GAAGd,GACnBA,GAAMU,EAASI,GAAGd,GAClBD,KAAQW,EAASI,GAAGf,KACpBE,MAAQS,EAASI,GAAGb,UAIxB,OACCC,EAAAC,EAAAC,cAAA,WACEO,ICEWM,EAhBG,SAAAnB,GAAkCA,EAA/BoB,YAA+B,IAAlBC,EAAkBrB,EAAlBqB,aACjC,OACCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAChBH,EAAAC,EAAAC,cAAA,SACAC,UAAW,2CACVe,KAAM,SACNC,YAAa,kBACbC,SAAYH,MCCDI,EARC,SAACC,GAChB,OACCtB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,iBAAkBC,OAAQ,QAASC,gBAAgB,YAC5FL,EAAMM,WC4CMC,cA1Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEvB,YAAasB,EAAME,OAAOC,SAb1CX,EAAKY,MAAQ,CACXlC,SAAU,GACVQ,YAAa,IAJJc,mFAQO,IAAAa,EAAAV,KAClBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAE/B,SAAUwC,uCAQnC,IAAAC,EAAAhB,KACAiB,EAAmBjB,KAAKS,MAAMlC,SAAS2C,OAAO,SAAAxC,GAClD,OAAOA,EAAKd,KAAKuD,cAAcC,SAASJ,EAAKP,MAAM1B,YAAYoC,iBAEjE,OAAmC,IAA/BnB,KAAKS,MAAMlC,SAAS8C,OACjBtD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,oBAGLH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAWtC,aAAgBgB,KAAKI,iBAChCrC,EAAAC,EAAAC,cAACsD,EAAD,KACAxD,EAAAC,EAAAC,cAACuD,EAAD,CAAUjD,SAAY0C,aAhCVQ,mBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACRjE,EAAAC,EAAAC,cAACgE,EAAD,MACCC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.13e999cb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst Card = ({name,id,email}) => {\r\n\t\treturn (\r\n\t\t\t<div className= \"bg-light-gray dib pa3 ma2 tc grow br3 shadow-5\" >\r\n\t\t\t<img className = \"br-100 ba b--black-05\" src ={`https://picsum.photos/id/${id}/200/200`} alt=\"Contact\"/>\r\n\t\t\t<div>\r\n\t\t\t<h2 className =\"mb2 f3 w5\"> {name}</h2>\r\n\t\t\t<p className = \"f3  fw4 mt0 gray\"> {email} </p>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t);\r\n\t\r\n} \r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({contacts}) => {\r\n\tconst CardArray = contacts.map((user, x) =>{\r\n\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\t key = {contacts[x].id} \r\n\t\t\t\t id = {contacts[x].id}\r\n\t\t\t\t name = {contacts[x].name}\r\n\t\t\t\t email ={contacts[x].email}  \r\n\t\t\t \t/>\r\n\t\t\t );\r\n\t\t\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{CardArray}\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBar = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className = \"pa2 mt0\">\r\n\t\t\t<input\r\n\t\t\tclassName =\"pa2 tc f2 ba b--light-gray bg-light-gray\"\r\n\t\t\t type =\"search\"\r\n\t\t\t placeholder =\"Search Contacts\"\r\n\t\t\t onChange = {searchChange}\r\n\t\t\t />\r\n\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst Wrapper = (props) => {\r\n\treturn(\r\n\t\t<div style={{ overflow: 'scroll', border: '2px solid grey', height: '500px', backgroundColor:'#E8D1FF' }}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Wrapper;","import React, {Component} from 'react';\n\nimport CardList from '../components/CardList.js';\nimport SearchBar from '../components/SearchBar.js'\nimport Wrapper from '../components/Wrapper.js'\n \nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      contacts: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(users => this.setState({ contacts: users}));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value})\n  }\n  \n   \n  render(){\n    const filteredContacts = this.state.contacts.filter(user =>{\n      return user.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    if (this.state.contacts.length === 0){\n    return <h1 className=\"tc\">Loading Contacts</h1>\n  } else{\n    return(\n      <div className=\"tc\" >\n      <h1>Contacts List</h1>\n      <SearchBar searchChange = {this.onSearchChange} />\n      <Wrapper>\n      <CardList contacts = {filteredContacts}/>\n      </Wrapper>\n      </div>\n    );\n  }\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './containers/App.js';\nimport './containers/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />,\n\t document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}